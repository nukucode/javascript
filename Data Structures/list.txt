//* Basic Data Structures

=> Use an Array to Store a Collection of Data

=> Access an Array's Contents Using Bracket Notation

=> Add Items to an Array with push() and unshift()

=> Remove Items from an Array with pop() and shift()

=> Remove Items Using splice()

=> Add Items Using splice()

=> Copy Array Items Using slice()

=> Copy an Array with the Spread Operator

=> Combine Arrays with the Spread Operator

=> Check For The Presence of an Element With indexOf()

=> Iterate Through All an Array's Items Using For Loops

=> Create complex multi-dimensional arrays

=> Add Key-Value Pairs to JavaScript Objects

=> Modify an Object Nested Within an Object

=> Access Property Names with Bracket Notation

=> Use the delete Keyword to Remove Object Properties

=> Check if an Object has a Property

=> Iterate Through the Keys of an Object with a for...in Statement

=> Generate an Array of All Object Keys with Object.keys()

=> Modify an Array Stored in an Object

//* Basic Algorithm Scripting

=> Convert Celsius to Fahrenheit

=> Reverse a String

=> Factorialize a Number

=> Find the Longest Word in a String

=> Return Largest Numbers in Arrays

=> Confirm the Ending

=> Repeat a String Repeat a String

=> Truncate a String

=> Finders Keepers

=> Boo who

=> Title Case a Sentence

=> Slice and Splice

=> Falsy Bouncer

=> Where do I Belong

=> Mutations

=> Chunky Monkey

//* Object Oriented Programming

=> Create a Basic JavaScript Object

=> Use Dot Notation to Access the Properties of an Object

=> Create a Method on an Object

=> Make Code More Reusable with the this Keyword

=> Define a Constructor Function

=> Use a Constructor to Create Objects

=> Extend Constructors to Receive Arguments

=> Verify an Object's Constructor with instanceof

=> Understand Own Properties

=> Use Prototype Properties to Reduce Duplicate Code

=> Iterate Over All Properties

=> Understand the Constructor Property

=> Change the Prototype to a New Object

=> Remember to Set the Constructor Property when Changing the Prototype

=> Understand Where an Objectâ€™s Prototype Comes From

=> Understand the Prototype Chain

=> Use Inheritance So You Don't Repeat Yourself

=> Inherit Behaviors from a Supertype

=> Set the Child's Prototype to an Instance of the Parent

=> Reset an Inherited Constructor Property

=> Add Methods After Inheritance

=> Override Inherited Methods

=> Use a Mixin to Add Common Behavior Between Unrelated Objects

=> Use Closure to Protect Properties Within an Object from Being Modified Externally

=> Understand the Immediately Invoked Function Expression (IIFE)

=> Use an IIFE to Create a Module

//* Functional Programming

=> Learn About Functional Programming

=> Understand Functional Programming Terminology

=> Understand the Hazards of Using Imperative Code

=> Avoid Mutations and Side Effects Using Functional Programming

=> Pass Arguments to Avoid External Dependence in a Function

=> Refactor Global Variables Out of Functions

=> Use the map Method to Extract Data from an Array

=> Implement map on a Prototype

=> Use the filter Method to Extract Data from an Array

=> Implement the filter Method on a Prototype

=> Return Part of an Array Using the slice Method

=> Remove Elements from an Array Using slice Instead of splice

=> Combine Two Arrays Using the concat Method

=> Add Elements to the End of an Array Using concat Instead of push

=> Use the reduce Method to Analyze Data

=> Use Higher-Order Functions map, filter, or reduce to Solve a Complex Problem

=> Sort an Array Alphabetically using the sort Method

=> Return a Sorted Array Without Changing the Original Array

=> Split a String into an Array Using the split Method

=> Combine an Array into a String Using the join Method

=> Apply Functional Programming to Convert Strings to URL Slugs

=> Use the every Method to Check that Every Element in an Array Meets a Criteria

=> Use the some Method to Check that Any Elements in an Array Meet a Criteria

=> Introduction to Currying and Partial Application

//* Intermediate Algorithm Scripting

=> Sum All Numbers in a Range

=> Diff Two Arrays

=> Seek and Destroy

=> Wherefore art thou

=> Spinal Tap Case

=> Pig Latin

=> Search and Replace

=> DNA Pairing

=> Missing letters

=> Sorted Union

=> Convert HTML Entities

=> Sum All Odd Fibonacci Numbers

=> Sum All Primes

=> Smallest Common Multiple

=> Drop it

=> Steamroller

=> Binary Agents

=> Everything Be True

=> Arguments Optional

=> Make a Person

=> Map the Debris

//* project

=> Palindrome Checker

=> Roman Numeral Converter

=> Caesars Cipher

=> Telephone Number Validator

=> Cash Register